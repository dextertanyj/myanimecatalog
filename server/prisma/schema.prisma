// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Status {
  DOWNLOADED
  MISSING
  UNRELEASED
}

enum WatchStatus {
  COMPLETED
  WATCHING
  ONHOLD
  PENDING
  DROPPED
}

enum Season {
  WINTER
  FALL
  SUMMER
  SPRING
}

enum Source {
  BLURAY
  DVD
  CD
  WEB
  TV
}

enum Type {
  MOVIE
  SERIES
  MUSICVIDEO
  OVA
  SPECIAL
}

enum Role {
  READONLY
  WRITE
  ADMIN
}

model User {
  id               String         @id @default(cuid())
  username         String         @unique
  name             String
  password         String
  passwordAttempts Int
  role             Role
  progress         UserProgress[]
}

model Episode {
  id                String             @id @default(cuid())
  title             String             @db.Text
  alternativeTitles AlternativeTitle[]
  series            Series             @relation(fields: seriesId, references: id, onDelete: Cascade)
  seriesId          String
  episodeNumber     Int
  files             File[]
  remarks           String?            @db.Text
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Series {
  id                  String             @id @default(cuid())
  title               String             @db.Text
  alternativeTitles   AlternativeTitle[]
  seasonNumber        Int?
  episodes            Episode[]
  episodeCount        Int?
  status              Status
  type                Type
  releaseSeason       String?
  releaseYear         DateTime?
  remarks             String?            @db.Text
  prequels            Series[]           @relation("prequel-sequel")
  sequels             Series[]           @relation("prequel-sequel")
  sideStories         Series[]           @relation("main-side")
  mainStories         Series[]           @relation("main-side")
  relatedSeries       Series[]           @relation("alternative")
  relatedAlternatives Series[]           @relation("alternative")
  references          Reference[]
  progress            UserProgress[]
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model AlternativeTitle {
  id        String   @id @default(cuid())
  title     String   @db.Text
  episode   Episode? @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  episodeId String?
  series    Series?  @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  seriesId  String?
}

model File {
  id               String   @id @default(cuid())
  path             String   @db.Text
  checksum         String
  fileSize         BigInt   @db.BigInt
  duration         Int
  resolutionHeight Int
  resolutionWidth  Int
  source           Source
  codec            String
  remarks          String?  @db.Text
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  episode          Episode  @relation(fields: [episodeId], references: [id], onDelete: Restrict)
  episodeId        String
}

model UserProgress {
  id        String      @id @default(cuid())
  series    Series      @relation(fields: [seriesId], references: [id], onDelete: Restrict)
  seriesId  String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  status    WatchStatus
  completed Int?
  overall   Int?
  execution Int?
  story     Int?
  sound     Int?
  art       Int?
  character Int?
  appeal    Int?
  remarks   String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([seriesId, userId])
}

model Reference {
  id       String @id @default(cuid())
  link     String @db.Text
  source   String
  series   Series @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  seriesId String
}
