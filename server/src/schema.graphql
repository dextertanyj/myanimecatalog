scalar DateTime
scalar Long

enum Status {
  DOWNLOADED
  MISSING
  UNRELEASED
}

enum WatchStatus {
  COMPLETED
  WATCHING
  ONHOLD
  PENDING
  DROPPED
}

enum Season {
  WINTER
  FALL
  SUMMER
  SPRING
}

enum Source {
  BLURAY
  DVD
  CD
  WEB
  TV
}

enum Type {
  MOVIE
  SERIES
  MUSICVIDEO
  OVA
  SPECIAL
}

enum Role {
  READONLY
  WRITE
  ADMIN
}

input UserWhereUniqueInput {
  id: String
  username: String
}

input MeUpdateInput {
  username: String
  currentPassword: String
  name: String
  password: String
  passwordAttempts: Int
}

input UserCreateUpdateInput {
  id: String
  username: String
  name: String
  password: String
  passwordAttempts: Int
  role: Role
}

input UserRelationInput {
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
}

input EpisodeWhereUniqueInput {
  id: String!
}

input EpisodeCreateUpdateInput {
  id: String
  title: String
  alternativeTitles: AlternativeTitleRelationInput
  series: SeriesRelationInput
  episodeNumber: Int
  files: FileRelationInput
  remarks: String
  createdAt: DateTime
  updatedAt: DateTime
}

input EpisodeManyRelationInput {
  create: [EpisodeCreateUpdateInput]
  delete: [EpisodeWhereUniqueInput]
}

input EpisodeRelationInput {
  create: EpisodeCreateUpdateInput
  connect: EpisodeWhereUniqueInput
}

input SeriesWhereUniqueInput {
  id: String!
}

input SeriesCreateUpdateInput {
  id: String
  title: String
  alternativeTitles: AlternativeTitleRelationInput
  seasonNumber: Int
  episodes: EpisodeManyRelationInput
  episodeCount: Int
  status: Status
  type: Type
  releaseSeason: Season
  releaseYear: DateTime
  remarks: String
  prequels: SeriesManyRelationInput
  sequels: SeriesManyRelationInput
  sideStories: SeriesManyRelationInput
  mainStories: SeriesManyRelationInput
  relatedSeries: SeriesManyRelationInput
  relatedAlternatives: SeriesManyRelationInput
  references: ReferenceRelationInput
  progress: UserProgressRelationInput
  createdAt: DateTime
  updatedAt: DateTime
}

input SeriesManyRelationInput {
  connect: [SeriesWhereUniqueInput]
  disconnect: [SeriesWhereUniqueInput]
}

input SeriesRelationInput {
  create: SeriesCreateUpdateInput
  connect: SeriesWhereUniqueInput
  disconnect: SeriesWhereUniqueInput
}

input AlternativeTitleWhereUniqueInput {
  id: String!
}

input AlternativeTitleCreateUpdateInput {
  id: String
  title: String
  episode: EpisodeRelationInput
  series: SeriesRelationInput
}

input AlternativeTitleRelationInput {
  create: [AlternativeTitleCreateUpdateInput]
  delete: [AlternativeTitleWhereUniqueInput]
  update: [AlternativeTitleUpdateWhereUniqueInput]
}

input AlternativeTitleUpdateWhereUniqueInput {
  where: AlternativeTitleWhereUniqueInput
  data: AlternativeTitleCreateUpdateInput
}

input FileWhereUniqueInput {
  id: String!
}

input FileCreateUpdateInput {
  id: String
  path: String
  checksum: String
  fileSize: Long
  duration: Int
  resolution: String
  source: Source
  codec: String
  remarks: String
  episode: EpisodeRelationInput
  createdAt: DateTime
  updatedAt: DateTime
}

input FileRelationInput {
  create: [FileCreateUpdateInput]
  delete: [FileWhereUniqueInput]
}

input UserProgressWhereUniqueInput {
  id: String
  seriesId_userId: SeriesUserCompoundInput
}

input SeriesUserCompoundInput {
  seriesId: String!
  userId: String!
}

input UserProgressCreateUpdateInput {
  id: String
  series: SeriesRelationInput
  user: UserRelationInput
  status: WatchStatus
  completed: Int
  overall: Int
  execution: Int
  story: Int
  sound: Int
  art: Int
  character: Int
  appeal: Int
  remarks: String
  createdAt: DateTime
  updatedAt: DateTime
}

input UserProgressRelationInput {
  create: [UserProgressCreateUpdateInput]
  delete: [UserProgressWhereUniqueInput]
  update: [UserProgressUpdateWhereUniqueInput]
}

input UserProgressUpdateWhereUniqueInput {
  where: UserProgressWhereUniqueInput
  data: UserProgressCreateUpdateInput
}

input ReferenceWhereUniqueInput {
  id: String!
}

input ReferenceCreateUpdateInput {
  id: String
  link: String
  source: String
  series: SeriesRelationInput
}

input ReferenceRelationInput {
  create: [ReferenceCreateUpdateInput]
  update: [ReferenceUpdateWhereUniqueInput]
  delete: [ReferenceWhereUniqueInput]
}

input ReferenceUpdateWhereUniqueInput {
  where: ReferenceWhereUniqueInput
  data: ReferenceCreateUpdateInput
}

type Query {
  loggedIn: User
  user(where: UserWhereUniqueInput!): User
  users: [User]
  isInitialized: Boolean

  series(where: SeriesWhereUniqueInput!): Series
  allSeries: [Series]
  totalSeriesCount: Int

  episode(where: EpisodeWhereUniqueInput!): Episode
  episodes: [Episode]
  episodesInSeries(where: SeriesWhereUniqueInput!): [Episode]

  file(where: FileWhereUniqueInput): File
  filesForEpisode(where: EpisodeWhereUniqueInput!): [File]
  files: [File]

  myProgress: [UserProgress]
  mySeriesProgress(where: SeriesWhereUniqueInput!): UserProgress
  userProgress(where: UserProgressWhereUniqueInput!): [UserProgress]
  allUserProgress: [UserProgress]

  reference(where: ReferenceCreateUpdateInput): Reference
  references: [Reference]

  quickSearch(where: String!): SearchPayload

  myTopTenSeries: [Series]
  myCurrentlyWatching: [Series]

  suggestedCodecs: [Codec]
  suggestedSources: [ReferenceSource]

  catalogStatistics: CatalogStatistics
}

type Mutation {
  login(data: UserCreateUpdateInput!): AuthPayload!

  updateMe(data: MeUpdateInput!): User!
  createInitialUser(data: UserCreateUpdateInput!): User!
  createUser(data: UserCreateUpdateInput!): User!
  updateUser(where: UserWhereUniqueInput!, data: UserCreateUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User!

  createSeries(data: SeriesCreateUpdateInput!): Series!
  updateSeries(
    where: SeriesWhereUniqueInput!
    data: SeriesCreateUpdateInput!
  ): Series!
  deleteSeries(where: SeriesWhereUniqueInput!): Series!

  createEpisode(data: EpisodeCreateUpdateInput!): Episode!
  batchCreateEpisode(data: [EpisodeCreateUpdateInput!]!): [Episode]!
  updateEpisode(
    where: EpisodeWhereUniqueInput!
    data: EpisodeCreateUpdateInput!
  ): Episode!
  deleteEpisode(where: EpisodeWhereUniqueInput!): Episode!

  createFile(data: FileCreateUpdateInput!): File!
  updateFile(where: FileWhereUniqueInput!, data: FileCreateUpdateInput!): File!
  deleteFile(where: FileWhereUniqueInput!): File!

  createUserProgress(data: UserProgressCreateUpdateInput!): UserProgress!
  updateUserProgress(
    where: UserProgressWhereUniqueInput!
    data: UserProgressCreateUpdateInput!
  ): UserProgress!
  updateMyProgress(
    where: SeriesWhereUniqueInput!
    data: UserProgressCreateUpdateInput!
  ): UserProgress!
  deleteUserProgress(where: UserProgressWhereUniqueInput!): UserProgress!
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: String
  username: String
  name: String
  password: String
  passwordAttempts: Int
  role: Role
  progress: [UserProgress]
}

type Episode {
  id: String
  title: String
  alternativeTitles: [AlternativeTitle]
  series: Series
  episodeNumber: Int
  files: [File]
  remarks: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Series {
  id: String
  title: String
  alternativeTitles: [AlternativeTitle]
  seasonNumber: Int
  episodes: [Episode]
  episodeCount: Int
  status: Status
  type: Type
  releaseSeason: Season
  releaseYear: DateTime
  remarks: String
  prequels: [Series]
  sequels: [Series]
  sideStories: [Series]
  mainStories: [Series]
  relatedSeries: [Series]
  relatedAlternatives: [Series]
  references: [Reference]
  progress: UserProgress
  currentStatus: WatchStatus
  allProgress: [UserProgress]
  createdAt: DateTime
  updatedAt: DateTime
}

type AlternativeTitle {
  id: String!
  title: String!
}

type File {
  id: String
  path: String
  checksum: String
  fileSize: Long
  duration: Int
  resolution: String
  source: Source
  codec: String
  remarks: String
  createdAt: DateTime
  updatedAt: DateTime
  episode: Episode
}

type UserProgress {
  id: String
  series: Series
  user: User
  status: WatchStatus
  completed: Int
  overall: Int
  execution: Int
  story: Int
  sound: Int
  art: Int
  character: Int
  appeal: Int
  remarks: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Reference {
  id: String
  link: String
  source: String
}

type SearchPayload {
  series: [Series]!
  episodes: [Episode]!
}

type Codec {
  codec: String
}

type ReferenceSource {
  source: String
}

type CatalogStatistics {
  totalSeriesCount: Int
  totalEpisodeCount: Int
  allFiles: [File]
  totalFileSize: Long
  totalDuration: Int
}
